# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.umfutures.models.umfutures_get_exchange_info_v1_resp import UmfuturesGetExchangeInfoV1Resp

class TestUmfuturesGetExchangeInfoV1Resp(unittest.TestCase):
    """UmfuturesGetExchangeInfoV1Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UmfuturesGetExchangeInfoV1Resp:
        """Test UmfuturesGetExchangeInfoV1Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UmfuturesGetExchangeInfoV1Resp`
        """
        model = UmfuturesGetExchangeInfoV1Resp()
        if include_optional:
            return UmfuturesGetExchangeInfoV1Resp(
                assets = [
                    binance.umfutures.models.umfutures_get_exchange_info_v1_resp_assets_inner.UmfuturesGetExchangeInfoV1Resp_assets_inner(
                        asset = '', 
                        auto_asset_exchange = 56, 
                        margin_available = True, )
                    ],
                exchange_filters = [
                    ''
                    ],
                rate_limits = [
                    binance.umfutures.models.umfutures_get_exchange_info_v1_resp_rate_limits_inner.UmfuturesGetExchangeInfoV1Resp_rateLimits_inner(
                        interval = '', 
                        interval_num = 56, 
                        limit = 56, 
                        rate_limit_type = '', )
                    ],
                server_time = 56,
                symbols = [
                    binance.umfutures.models.umfutures_get_exchange_info_v1_resp_symbols_inner.UmfuturesGetExchangeInfoV1Resp_symbols_inner(
                        order_type = [
                            ''
                            ], 
                        base_asset = '', 
                        base_asset_precision = 56, 
                        contract_type = '', 
                        delivery_date = 56, 
                        filters = [
                            binance.umfutures.models.umfutures_get_exchange_info_v1_resp_symbols_inner_filters_inner.UmfuturesGetExchangeInfoV1Resp_symbols_inner_filters_inner(
                                filter_type = '', 
                                max_price = '', 
                                min_price = '', 
                                tick_size = '', )
                            ], 
                        liquidation_fee = '', 
                        maint_margin_percent = '', 
                        margin_asset = '', 
                        market_take_bound = '', 
                        onboard_date = 56, 
                        pair = '', 
                        price_precision = 56, 
                        quantity_precision = 56, 
                        quote_asset = '', 
                        quote_precision = 56, 
                        required_margin_percent = '', 
                        settle_plan = 56, 
                        status = '', 
                        symbol = '', 
                        time_in_force = [
                            ''
                            ], 
                        trigger_protect = '', 
                        underlying_sub_type = [
                            ''
                            ], 
                        underlying_type = '', )
                    ],
                timezone = ''
            )
        else:
            return UmfuturesGetExchangeInfoV1Resp(
        )
        """

    def testUmfuturesGetExchangeInfoV1Resp(self):
        """Test UmfuturesGetExchangeInfoV1Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
