# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.umfutures.models.umfutures_create_batch_orders_v1_req_batch_orders_item import UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem

class TestUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(unittest.TestCase):
    """UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem:
        """Test UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem`
        """
        model = UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem()
        if include_optional:
            return UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(
                activation_price = '',
                callback_rate = '',
                good_till_date = 56,
                new_client_order_id = '',
                new_order_resp_type = '',
                position_side = '',
                price = '',
                price_match = '',
                price_protect = '',
                quantity = '',
                reduce_only = '',
                self_trade_prevention_mode = '',
                side = '',
                stop_price = '',
                symbol = '',
                time_in_force = '',
                type = '',
                working_type = ''
            )
        else:
            return UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(
                quantity = '',
                side = '',
                symbol = '',
                type = '',
        )
        """

    def testUmfuturesCreateBatchOrdersV1ReqBatchOrdersItem(self):
        """Test UmfuturesCreateBatchOrdersV1ReqBatchOrdersItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
