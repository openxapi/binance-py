# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.umfutures.models.umfutures_create_batch_orders_v1_resp_inner import UmfuturesCreateBatchOrdersV1RespInner

class TestUmfuturesCreateBatchOrdersV1RespInner(unittest.TestCase):
    """UmfuturesCreateBatchOrdersV1RespInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UmfuturesCreateBatchOrdersV1RespInner:
        """Test UmfuturesCreateBatchOrdersV1RespInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UmfuturesCreateBatchOrdersV1RespInner`
        """
        model = UmfuturesCreateBatchOrdersV1RespInner()
        if include_optional:
            return UmfuturesCreateBatchOrdersV1RespInner(
                activate_price = '',
                avg_price = '',
                client_order_id = '',
                cum_qty = '',
                cum_quote = '',
                executed_qty = '',
                good_till_date = 56,
                order_id = 56,
                orig_qty = '',
                orig_type = '',
                position_side = '',
                price = '',
                price_match = '',
                price_protect = True,
                price_rate = '',
                reduce_only = True,
                self_trade_prevention_mode = '',
                side = '',
                status = '',
                stop_price = '',
                symbol = '',
                time_in_force = '',
                type = '',
                update_time = 56,
                working_type = '',
                code = 56,
                msg = ''
            )
        else:
            return UmfuturesCreateBatchOrdersV1RespInner(
        )
        """

    def testUmfuturesCreateBatchOrdersV1RespInner(self):
        """Test UmfuturesCreateBatchOrdersV1RespInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
