# coding: utf-8

"""
    Binance Portfolio Margin API

    OpenAPI specification for Binance exchange - Pmargin API

    The version of the OpenAPI document: 0.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.pmargin.models.get_um_api_trading_status_v1_resp import GetUmApiTradingStatusV1Resp

class TestGetUmApiTradingStatusV1Resp(unittest.TestCase):
    """GetUmApiTradingStatusV1Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetUmApiTradingStatusV1Resp:
        """Test GetUmApiTradingStatusV1Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetUmApiTradingStatusV1Resp`
        """
        model = GetUmApiTradingStatusV1Resp()
        if include_optional:
            return GetUmApiTradingStatusV1Resp(
                indicators = binance.pmargin.models.get_um_api_trading_status_v1_resp_indicators.GetUmApiTradingStatusV1Resp_indicators(
                    btcusdt = [
                        binance.pmargin.models.get_um_api_trading_status_v1_resp_indicators_btcusdt_inner.GetUmApiTradingStatusV1Resp_indicators_BTCUSDT_inner(
                            indicator = '', 
                            is_locked = True, 
                            planned_recover_time = 56, 
                            trigger_value = 1.337, 
                            value = 1.337, )
                        ], ),
                update_time = 56
            )
        else:
            return GetUmApiTradingStatusV1Resp(
        )
        """

    def testGetUmApiTradingStatusV1Resp(self):
        """Test GetUmApiTradingStatusV1Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
