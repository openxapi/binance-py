# coding: utf-8

"""
    Binance Margin Trading API

    OpenAPI specification for Binance exchange - Margin API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.margin.models.margin_get_margin_leverage_bracket_v1_resp_item import MarginGetMarginLeverageBracketV1RespItem

class TestMarginGetMarginLeverageBracketV1RespItem(unittest.TestCase):
    """MarginGetMarginLeverageBracketV1RespItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> MarginGetMarginLeverageBracketV1RespItem:
        """Test MarginGetMarginLeverageBracketV1RespItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `MarginGetMarginLeverageBracketV1RespItem`
        """
        model = MarginGetMarginLeverageBracketV1RespItem()
        if include_optional:
            return MarginGetMarginLeverageBracketV1RespItem(
                asset_names = [
                    ''
                    ],
                brackets = [
                    binance.margin.models.margin_get_margin_leverage_bracket_v1_resp_item_brackets_inner.MarginGetMarginLeverageBracketV1RespItem_brackets_inner(
                        fast_num = 56, 
                        initial_margin_rate = 1.337, 
                        leverage = 56, 
                        maintenance_margin_rate = 1.337, 
                        max_debt = 56, )
                    ],
                rank = 56
            )
        else:
            return MarginGetMarginLeverageBracketV1RespItem(
        )
        """

    def testMarginGetMarginLeverageBracketV1RespItem(self):
        """Test MarginGetMarginLeverageBracketV1RespItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
