# coding: utf-8

"""
    Binance Options API

    OpenAPI specification for Binance exchange - Options API

    The version of the OpenAPI document: 0.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.options.models.options_get_exchange_info_v1_resp_option_symbols_inner import OptionsGetExchangeInfoV1RespOptionSymbolsInner

class TestOptionsGetExchangeInfoV1RespOptionSymbolsInner(unittest.TestCase):
    """OptionsGetExchangeInfoV1RespOptionSymbolsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OptionsGetExchangeInfoV1RespOptionSymbolsInner:
        """Test OptionsGetExchangeInfoV1RespOptionSymbolsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OptionsGetExchangeInfoV1RespOptionSymbolsInner`
        """
        model = OptionsGetExchangeInfoV1RespOptionSymbolsInner()
        if include_optional:
            return OptionsGetExchangeInfoV1RespOptionSymbolsInner(
                expiry_date = 56,
                filters = [
                    binance.options.models.options_symbol_filter.OptionsSymbolFilter(
                        filter_type = '', 
                        max_price = '', 
                        max_qty = '', 
                        min_price = '', 
                        min_qty = '', 
                        step_size = '', 
                        tick_size = '', )
                    ],
                initial_margin = '',
                maintenance_margin = '',
                maker_fee_rate = '',
                max_qty = '',
                min_initial_margin = '',
                min_maintenance_margin = '',
                min_qty = '',
                price_scale = 56,
                quantity_scale = 56,
                quote_asset = '',
                side = '',
                strike_price = '',
                symbol = '',
                taker_fee_rate = '',
                underlying = '',
                unit = 56
            )
        else:
            return OptionsGetExchangeInfoV1RespOptionSymbolsInner(
        )
        """

    def testOptionsGetExchangeInfoV1RespOptionSymbolsInner(self):
        """Test OptionsGetExchangeInfoV1RespOptionSymbolsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
