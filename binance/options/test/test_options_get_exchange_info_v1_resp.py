# coding: utf-8

"""
    Binance Options API

    OpenAPI specification for Binance exchange - Options API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.options.models.options_get_exchange_info_v1_resp import OptionsGetExchangeInfoV1Resp

class TestOptionsGetExchangeInfoV1Resp(unittest.TestCase):
    """OptionsGetExchangeInfoV1Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OptionsGetExchangeInfoV1Resp:
        """Test OptionsGetExchangeInfoV1Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OptionsGetExchangeInfoV1Resp`
        """
        model = OptionsGetExchangeInfoV1Resp()
        if include_optional:
            return OptionsGetExchangeInfoV1Resp(
                option_assets = [
                    binance.options.models.options_get_exchange_info_v1_resp_option_assets_inner.OptionsGetExchangeInfoV1Resp_optionAssets_inner(
                        name = '', )
                    ],
                option_contracts = [
                    binance.options.models.options_get_exchange_info_v1_resp_option_contracts_inner.OptionsGetExchangeInfoV1Resp_optionContracts_inner(
                        base_asset = '', 
                        quote_asset = '', 
                        settle_asset = '', 
                        underlying = '', )
                    ],
                option_symbols = [
                    binance.options.models.options_get_exchange_info_v1_resp_option_symbols_inner.OptionsGetExchangeInfoV1Resp_optionSymbols_inner(
                        expiry_date = 56, 
                        filters = [
                            binance.options.models.options_symbol_filter.OptionsSymbolFilter(
                                filter_type = '', 
                                max_price = '', 
                                max_qty = '', 
                                min_price = '', 
                                min_qty = '', 
                                step_size = '', 
                                tick_size = '', )
                            ], 
                        initial_margin = '', 
                        maintenance_margin = '', 
                        maker_fee_rate = '', 
                        max_qty = '', 
                        min_initial_margin = '', 
                        min_maintenance_margin = '', 
                        min_qty = '', 
                        price_scale = 56, 
                        quantity_scale = 56, 
                        quote_asset = '', 
                        side = '', 
                        strike_price = '', 
                        symbol = '', 
                        taker_fee_rate = '', 
                        underlying = '', 
                        unit = 56, )
                    ],
                rate_limits = [
                    binance.options.models.options_get_exchange_info_v1_resp_rate_limits_inner.OptionsGetExchangeInfoV1Resp_rateLimits_inner(
                        interval = '', 
                        interval_num = 56, 
                        limit = 56, 
                        rate_limit_type = '', )
                    ],
                server_time = 56,
                timezone = ''
            )
        else:
            return OptionsGetExchangeInfoV1Resp(
        )
        """

    def testOptionsGetExchangeInfoV1Resp(self):
        """Test OptionsGetExchangeInfoV1Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
