# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.umfutures.models.umfutures_get_position_risk_v2_resp_item import UmfuturesGetPositionRiskV2RespItem

class TestUmfuturesGetPositionRiskV2RespItem(unittest.TestCase):
    """UmfuturesGetPositionRiskV2RespItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UmfuturesGetPositionRiskV2RespItem:
        """Test UmfuturesGetPositionRiskV2RespItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UmfuturesGetPositionRiskV2RespItem`
        """
        model = UmfuturesGetPositionRiskV2RespItem()
        if include_optional:
            return UmfuturesGetPositionRiskV2RespItem(
                break_even_price = '',
                entry_price = '',
                is_auto_add_margin = '',
                isolated_margin = '',
                isolated_wallet = '',
                leverage = '',
                liquidation_price = '',
                margin_type = '',
                mark_price = '',
                max_notional_value = '',
                notional = '',
                position_amt = '',
                position_side = '',
                symbol = '',
                un_realized_profit = '',
                update_time = 56
            )
        else:
            return UmfuturesGetPositionRiskV2RespItem(
        )
        """

    def testUmfuturesGetPositionRiskV2RespItem(self):
        """Test UmfuturesGetPositionRiskV2RespItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
