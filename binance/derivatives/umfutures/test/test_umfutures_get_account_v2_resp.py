# coding: utf-8

"""
    Binance USD-M Futures API

    OpenAPI specification for Binance exchange - Umfutures API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.umfutures.models.umfutures_get_account_v2_resp import UmfuturesGetAccountV2Resp

class TestUmfuturesGetAccountV2Resp(unittest.TestCase):
    """UmfuturesGetAccountV2Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> UmfuturesGetAccountV2Resp:
        """Test UmfuturesGetAccountV2Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `UmfuturesGetAccountV2Resp`
        """
        model = UmfuturesGetAccountV2Resp()
        if include_optional:
            return UmfuturesGetAccountV2Resp(
                assets = [
                    binance.derivatives.umfutures.models.umfutures_get_account_v2_resp_assets_inner.UmfuturesGetAccountV2Resp_assets_inner(
                        asset = '', 
                        available_balance = '', 
                        cross_un_pnl = '', 
                        cross_wallet_balance = '', 
                        initial_margin = '', 
                        maint_margin = '', 
                        margin_available = True, 
                        margin_balance = '', 
                        max_withdraw_amount = '', 
                        open_order_initial_margin = '', 
                        position_initial_margin = '', 
                        unrealized_profit = '', 
                        update_time = 56, 
                        wallet_balance = '', )
                    ],
                available_balance = '',
                can_deposit = True,
                can_withdraw = True,
                fee_burn = True,
                fee_tier = 56,
                max_withdraw_amount = '',
                multi_assets_margin = True,
                positions = [
                    binance.derivatives.umfutures.models.umfutures_get_account_v2_resp_positions_inner.UmfuturesGetAccountV2Resp_positions_inner(
                        ask_notional = '', 
                        bid_notional = '', 
                        entry_price = '', 
                        initial_margin = '', 
                        isolated = True, 
                        leverage = '', 
                        maint_margin = '', 
                        max_notional = '', 
                        open_order_initial_margin = '', 
                        position_amt = '', 
                        position_initial_margin = '', 
                        position_side = '', 
                        symbol = '', 
                        unrealized_profit = '', 
                        update_time = 56, )
                    ],
                total_cross_un_pnl = '',
                total_cross_wallet_balance = '',
                total_initial_margin = '',
                total_maint_margin = '',
                total_margin_balance = '',
                total_open_order_initial_margin = '',
                total_position_initial_margin = '',
                total_unrealized_profit = '',
                total_wallet_balance = '',
                trade_group_id = 56,
                update_time = 56
            )
        else:
            return UmfuturesGetAccountV2Resp(
        )
        """

    def testUmfuturesGetAccountV2Resp(self):
        """Test UmfuturesGetAccountV2Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
