# coding: utf-8

"""
    Binance Portfolio Margin Pro API

    OpenAPI specification for Binance exchange - Pmarginpro API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.pmarginpro.models.pmarginpro_get_portfolio_collateral_rate_v2_resp_item import PmarginproGetPortfolioCollateralRateV2RespItem

class TestPmarginproGetPortfolioCollateralRateV2RespItem(unittest.TestCase):
    """PmarginproGetPortfolioCollateralRateV2RespItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PmarginproGetPortfolioCollateralRateV2RespItem:
        """Test PmarginproGetPortfolioCollateralRateV2RespItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PmarginproGetPortfolioCollateralRateV2RespItem`
        """
        model = PmarginproGetPortfolioCollateralRateV2RespItem()
        if include_optional:
            return PmarginproGetPortfolioCollateralRateV2RespItem(
                asset = '',
                collateral_info = [
                    binance.derivatives.pmarginpro.models.pmarginpro_get_portfolio_collateral_rate_v2_resp_item_collateral_info_inner.PmarginproGetPortfolioCollateralRateV2RespItem_collateralInfo_inner(
                        collateral_rate = '', 
                        cum = '', 
                        tier_cap = '', 
                        tier_floor = '', )
                    ]
            )
        else:
            return PmarginproGetPortfolioCollateralRateV2RespItem(
        )
        """

    def testPmarginproGetPortfolioCollateralRateV2RespItem(self):
        """Test PmarginproGetPortfolioCollateralRateV2RespItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
