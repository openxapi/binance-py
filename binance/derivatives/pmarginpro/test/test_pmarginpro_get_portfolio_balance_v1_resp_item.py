# coding: utf-8

"""
    Binance Portfolio Margin Pro API

    OpenAPI specification for Binance exchange - Pmarginpro API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.pmarginpro.models.pmarginpro_get_portfolio_balance_v1_resp_item import PmarginproGetPortfolioBalanceV1RespItem

class TestPmarginproGetPortfolioBalanceV1RespItem(unittest.TestCase):
    """PmarginproGetPortfolioBalanceV1RespItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PmarginproGetPortfolioBalanceV1RespItem:
        """Test PmarginproGetPortfolioBalanceV1RespItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PmarginproGetPortfolioBalanceV1RespItem`
        """
        model = PmarginproGetPortfolioBalanceV1RespItem()
        if include_optional:
            return PmarginproGetPortfolioBalanceV1RespItem(
                asset = '',
                cm_unrealized_pnl = '',
                cm_wallet_balance = '',
                cross_margin_asset = '',
                cross_margin_borrowed = '',
                cross_margin_free = '',
                cross_margin_interest = '',
                cross_margin_locked = '',
                negative_balance = '',
                option_equity = '',
                option_wallet_balance = '',
                total_wallet_balance = '',
                um_unrealized_pnl = '',
                um_wallet_balance = '',
                update_time = 56
            )
        else:
            return PmarginproGetPortfolioBalanceV1RespItem(
        )
        """

    def testPmarginproGetPortfolioBalanceV1RespItem(self):
        """Test PmarginproGetPortfolioBalanceV1RespItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
