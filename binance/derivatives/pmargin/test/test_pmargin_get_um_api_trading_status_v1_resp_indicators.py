# coding: utf-8

"""
    Binance Portfolio Margin API

    OpenAPI specification for Binance exchange - Pmargin API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.pmargin.models.pmargin_get_um_api_trading_status_v1_resp_indicators import PmarginGetUmApiTradingStatusV1RespIndicators

class TestPmarginGetUmApiTradingStatusV1RespIndicators(unittest.TestCase):
    """PmarginGetUmApiTradingStatusV1RespIndicators unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PmarginGetUmApiTradingStatusV1RespIndicators:
        """Test PmarginGetUmApiTradingStatusV1RespIndicators
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PmarginGetUmApiTradingStatusV1RespIndicators`
        """
        model = PmarginGetUmApiTradingStatusV1RespIndicators()
        if include_optional:
            return PmarginGetUmApiTradingStatusV1RespIndicators(
                btcusdt = [
                    binance.derivatives.pmargin.models.pmargin_get_um_api_trading_status_v1_resp_indicators_btcusdt_inner.PmarginGetUmApiTradingStatusV1Resp_indicators_BTCUSDT_inner(
                        indicator = '', 
                        is_locked = True, 
                        planned_recover_time = 56, 
                        trigger_value = 1.337, 
                        value = 1.337, )
                    ]
            )
        else:
            return PmarginGetUmApiTradingStatusV1RespIndicators(
        )
        """

    def testPmarginGetUmApiTradingStatusV1RespIndicators(self):
        """Test PmarginGetUmApiTradingStatusV1RespIndicators"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
