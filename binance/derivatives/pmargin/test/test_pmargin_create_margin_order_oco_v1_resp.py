# coding: utf-8

"""
    Binance Portfolio Margin API

    OpenAPI specification for Binance exchange - Pmargin API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.pmargin.models.pmargin_create_margin_order_oco_v1_resp import PmarginCreateMarginOrderOcoV1Resp

class TestPmarginCreateMarginOrderOcoV1Resp(unittest.TestCase):
    """PmarginCreateMarginOrderOcoV1Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PmarginCreateMarginOrderOcoV1Resp:
        """Test PmarginCreateMarginOrderOcoV1Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PmarginCreateMarginOrderOcoV1Resp`
        """
        model = PmarginCreateMarginOrderOcoV1Resp()
        if include_optional:
            return PmarginCreateMarginOrderOcoV1Resp(
                contingency_type = '',
                list_client_order_id = '',
                list_order_status = '',
                list_status_type = '',
                margin_buy_borrow_amount = '',
                margin_buy_borrow_asset = '',
                order_list_id = 56,
                order_reports = [
                    binance.derivatives.pmargin.models.pmargin_create_margin_order_oco_v1_resp_order_reports_inner.PmarginCreateMarginOrderOcoV1Resp_orderReports_inner(
                        client_order_id = '', 
                        cummulative_quote_qty = '', 
                        executed_qty = '', 
                        order_id = 56, 
                        order_list_id = 56, 
                        orig_qty = '', 
                        price = '', 
                        side = '', 
                        status = '', 
                        stop_price = '', 
                        symbol = '', 
                        time_in_force = '', 
                        transact_time = 56, 
                        type = '', )
                    ],
                orders = [
                    binance.derivatives.pmargin.models.pmargin_create_margin_order_oco_v1_resp_orders_inner.PmarginCreateMarginOrderOcoV1Resp_orders_inner(
                        client_order_id = '', 
                        order_id = 56, 
                        symbol = '', )
                    ],
                symbol = '',
                transaction_time = 56
            )
        else:
            return PmarginCreateMarginOrderOcoV1Resp(
        )
        """

    def testPmarginCreateMarginOrderOcoV1Resp(self):
        """Test PmarginCreateMarginOrderOcoV1Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
