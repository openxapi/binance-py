# coding: utf-8

"""
    Binance COIN-M Futures API

    OpenAPI specification for Binance exchange - Cmfutures API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.cmfutures.models.cmfutures_get_adl_quantile_v1_resp_item import CmfuturesGetAdlQuantileV1RespItem

class TestCmfuturesGetAdlQuantileV1RespItem(unittest.TestCase):
    """CmfuturesGetAdlQuantileV1RespItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CmfuturesGetAdlQuantileV1RespItem:
        """Test CmfuturesGetAdlQuantileV1RespItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CmfuturesGetAdlQuantileV1RespItem`
        """
        model = CmfuturesGetAdlQuantileV1RespItem()
        if include_optional:
            return CmfuturesGetAdlQuantileV1RespItem(
                adl_quantile = binance.derivatives.cmfutures.models.cmfutures_get_adl_quantile_v1_resp_item_adl_quantile.CmfuturesGetAdlQuantileV1RespItem_adlQuantile(
                    hedge = 56, 
                    long = 56, 
                    short = 56, ),
                symbol = ''
            )
        else:
            return CmfuturesGetAdlQuantileV1RespItem(
        )
        """

    def testCmfuturesGetAdlQuantileV1RespItem(self):
        """Test CmfuturesGetAdlQuantileV1RespItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
