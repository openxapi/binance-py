# coding: utf-8

"""
    Binance COIN-M Futures API

    OpenAPI specification for Binance exchange - Cmfutures API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.derivatives.cmfutures.models.cmfutures_get_exchange_info_v1_resp_symbols_inner import CmfuturesGetExchangeInfoV1RespSymbolsInner

class TestCmfuturesGetExchangeInfoV1RespSymbolsInner(unittest.TestCase):
    """CmfuturesGetExchangeInfoV1RespSymbolsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CmfuturesGetExchangeInfoV1RespSymbolsInner:
        """Test CmfuturesGetExchangeInfoV1RespSymbolsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CmfuturesGetExchangeInfoV1RespSymbolsInner`
        """
        model = CmfuturesGetExchangeInfoV1RespSymbolsInner()
        if include_optional:
            return CmfuturesGetExchangeInfoV1RespSymbolsInner(
                order_type = [
                    ''
                    ],
                base_asset = '',
                base_asset_precision = 56,
                contract_size = 56,
                contract_status = '',
                contract_type = '',
                delivery_date = 56,
                equal_qty_precision = 56,
                filters = [
                    binance.derivatives.cmfutures.models.cmfutures_symbol_filter.CmfuturesSymbolFilter(
                        filter_type = '', 
                        limit = 56, 
                        max_price = '', 
                        max_qty = '', 
                        min_price = '', 
                        min_qty = '', 
                        multiplier_decimal = 56, 
                        multiplier_down = '', 
                        multiplier_up = '', 
                        step_size = '', 
                        tick_size = '', )
                    ],
                liquidation_fee = '',
                maint_margin_percent = '',
                margin_asset = '',
                market_take_bound = '',
                onboard_date = 56,
                pair = '',
                price_precision = 56,
                quantity_precision = 56,
                quote_asset = '',
                quote_precision = 56,
                required_margin_percent = '',
                symbol = '',
                time_in_force = [
                    ''
                    ],
                trigger_protect = '',
                underlying_sub_type = [
                    ''
                    ],
                underlying_type = ''
            )
        else:
            return CmfuturesGetExchangeInfoV1RespSymbolsInner(
        )
        """

    def testCmfuturesGetExchangeInfoV1RespSymbolsInner(self):
        """Test CmfuturesGetExchangeInfoV1RespSymbolsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
