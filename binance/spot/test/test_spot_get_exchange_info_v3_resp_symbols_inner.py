# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.spot.models.spot_get_exchange_info_v3_resp_symbols_inner import SpotGetExchangeInfoV3RespSymbolsInner

class TestSpotGetExchangeInfoV3RespSymbolsInner(unittest.TestCase):
    """SpotGetExchangeInfoV3RespSymbolsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpotGetExchangeInfoV3RespSymbolsInner:
        """Test SpotGetExchangeInfoV3RespSymbolsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpotGetExchangeInfoV3RespSymbolsInner`
        """
        model = SpotGetExchangeInfoV3RespSymbolsInner()
        if include_optional:
            return SpotGetExchangeInfoV3RespSymbolsInner(
                allow_trailing_stop = True,
                allowed_self_trade_prevention_modes = [
                    ''
                    ],
                base_asset = '',
                base_asset_precision = 56,
                base_commission_precision = 56,
                cancel_replace_allowed = True,
                default_self_trade_prevention_mode = '',
                filters = [
                    binance.spot.models.spot_symbol_filter.SpotSymbolFilter(
                        apply_max_to_market = True, 
                        apply_min_to_market = True, 
                        apply_to_market = True, 
                        ask_multiplier_down = '', 
                        ask_multiplier_up = '', 
                        avg_price_mins = 56, 
                        bid_multiplier_down = '', 
                        bid_multiplier_up = '', 
                        filter_type = '', 
                        limit = 56, 
                        max_notional_value = '', 
                        max_num_algo_orders = 56, 
                        max_num_iceberg_orders = 56, 
                        max_num_orders = 56, 
                        max_position = '', 
                        max_price = '', 
                        max_qty = '', 
                        max_trailing_above_delta = 56, 
                        max_trailing_below_delta = 56, 
                        min_notional_value = '', 
                        min_price = '', 
                        min_qty = '', 
                        min_trailing_above_delta = 56, 
                        min_trailing_below_delta = 56, 
                        multiplier_down = '', 
                        multiplier_up = '', 
                        step_size = '', 
                        tick_size = '', )
                    ],
                iceberg_allowed = True,
                is_margin_trading_allowed = True,
                is_spot_trading_allowed = True,
                oco_allowed = True,
                order_types = [
                    ''
                    ],
                oto_allowed = True,
                permission_sets = [
                    [
                        ''
                        ]
                    ],
                permissions = [
                    ''
                    ],
                quote_asset = '',
                quote_asset_precision = 56,
                quote_commission_precision = 56,
                quote_order_qty_market_allowed = True,
                quote_precision = 56,
                status = '',
                symbol = ''
            )
        else:
            return SpotGetExchangeInfoV3RespSymbolsInner(
        )
        """

    def testSpotGetExchangeInfoV3RespSymbolsInner(self):
        """Test SpotGetExchangeInfoV3RespSymbolsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
