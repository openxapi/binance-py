# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.spot.models.spot_symbol_filter import SpotSymbolFilter

class TestSpotSymbolFilter(unittest.TestCase):
    """SpotSymbolFilter unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpotSymbolFilter:
        """Test SpotSymbolFilter
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpotSymbolFilter`
        """
        model = SpotSymbolFilter()
        if include_optional:
            return SpotSymbolFilter(
                apply_max_to_market = True,
                apply_min_to_market = True,
                apply_to_market = True,
                ask_multiplier_down = '',
                ask_multiplier_up = '',
                avg_price_mins = 56,
                bid_multiplier_down = '',
                bid_multiplier_up = '',
                filter_type = '',
                limit = 56,
                max_notional_value = '',
                max_num_algo_orders = 56,
                max_num_iceberg_orders = 56,
                max_num_orders = 56,
                max_position = '',
                max_price = '',
                max_qty = '',
                max_trailing_above_delta = 56,
                max_trailing_below_delta = 56,
                min_notional_value = '',
                min_price = '',
                min_qty = '',
                min_trailing_above_delta = 56,
                min_trailing_below_delta = 56,
                multiplier_down = '',
                multiplier_up = '',
                step_size = '',
                tick_size = ''
            )
        else:
            return SpotSymbolFilter(
        )
        """

    def testSpotSymbolFilter(self):
        """Test SpotSymbolFilter"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
