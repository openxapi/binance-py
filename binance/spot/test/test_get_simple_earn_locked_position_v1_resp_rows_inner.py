# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.spot.models.get_simple_earn_locked_position_v1_resp_rows_inner import GetSimpleEarnLockedPositionV1RespRowsInner

class TestGetSimpleEarnLockedPositionV1RespRowsInner(unittest.TestCase):
    """GetSimpleEarnLockedPositionV1RespRowsInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetSimpleEarnLockedPositionV1RespRowsInner:
        """Test GetSimpleEarnLockedPositionV1RespRowsInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetSimpleEarnLockedPositionV1RespRowsInner`
        """
        model = GetSimpleEarnLockedPositionV1RespRowsInner()
        if include_optional:
            return GetSimpleEarnLockedPositionV1RespRowsInner(
                apy = '',
                accrual_days = '',
                amount = '',
                asset = '',
                auto_subscribe = True,
                boost_apr = '',
                boost_reward_asset = '',
                can_fast_redemption = True,
                can_re_stake = True,
                can_redeem_early = True,
                deliver_date = '',
                duration = '',
                est_extra_reward_amt = '',
                extra_reward_apr = '',
                extra_reward_asset = '',
                next_pay = '',
                next_pay_date = '',
                parent_position_id = 56,
                partial_amt_deliver_date = '',
                pay_period = '',
                position_id = 56,
                project_id = '',
                purchase_time = '',
                redeem_amount_early = '',
                redeem_period = '',
                redeem_to = '',
                redeeming_amt = '',
                reward_amt = '',
                reward_asset = '',
                rewards_end_date = '',
                status = '',
                total_boost_reward_amt = '',
                type = ''
            )
        else:
            return GetSimpleEarnLockedPositionV1RespRowsInner(
        )
        """

    def testGetSimpleEarnLockedPositionV1RespRowsInner(self):
        """Test GetSimpleEarnLockedPositionV1RespRowsInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
