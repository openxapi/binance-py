# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.spot.models.get_pay_transactions_v1_resp import GetPayTransactionsV1Resp

class TestGetPayTransactionsV1Resp(unittest.TestCase):
    """GetPayTransactionsV1Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetPayTransactionsV1Resp:
        """Test GetPayTransactionsV1Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetPayTransactionsV1Resp`
        """
        model = GetPayTransactionsV1Resp()
        if include_optional:
            return GetPayTransactionsV1Resp(
                code = '',
                data = [
                    binance.spot.models.get_pay_transactions_v1_resp_data_inner.GetPayTransactionsV1Resp_data_inner(
                        amount = '', 
                        currency = '', 
                        funds_detail = [
                            binance.spot.models.get_pay_transactions_v1_resp_data_inner_funds_detail_inner.GetPayTransactionsV1Resp_data_inner_fundsDetail_inner(
                                amount = '', 
                                currency = '', 
                                wallet_asset_cost = [
                                    binance.spot.models.get_pay_transactions_v1_resp_data_inner_funds_detail_inner_wallet_asset_cost_inner.GetPayTransactionsV1Resp_data_inner_fundsDetail_inner_walletAssetCost_inner(
                                        1 = '', )
                                    ], )
                            ], 
                        order_type = '', 
                        payer_info = binance.spot.models.get_pay_transactions_v1_resp_data_inner_payer_info.GetPayTransactionsV1Resp_data_inner_payerInfo(
                            account_id = '', 
                            binance_id = '', 
                            name = '', 
                            type = '', ), 
                        receiver_info = binance.spot.models.get_pay_transactions_v1_resp_data_inner_receiver_info.GetPayTransactionsV1Resp_data_inner_receiverInfo(
                            account_id = '', 
                            binance_id = '', 
                            country_code = '', 
                            email = '', 
                            extend = binance.spot.models.get_pay_transactions_v1_resp_data_inner_receiver_info_extend.GetPayTransactionsV1Resp_data_inner_receiverInfo_extend(
                                card_number = '', 
                                digital_wallet_id = '', 
                                institution_name = '', ), 
                            mobile_code = '', 
                            name = '', 
                            phone_number = '', 
                            type = '', ), 
                        transaction_id = '', 
                        transaction_time = 56, 
                        wallet_type = 56, 
                        wallet_types = [
                            56
                            ], )
                    ],
                message = '',
                success = True
            )
        else:
            return GetPayTransactionsV1Resp(
        )
        """

    def testGetPayTransactionsV1Resp(self):
        """Test GetPayTransactionsV1Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
