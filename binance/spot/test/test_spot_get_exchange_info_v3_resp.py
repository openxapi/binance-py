# coding: utf-8

"""
    Binance Spot API

    OpenAPI specification for Binance exchange - Spot API

    The version of the OpenAPI document: 0.2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.spot.models.spot_get_exchange_info_v3_resp import SpotGetExchangeInfoV3Resp

class TestSpotGetExchangeInfoV3Resp(unittest.TestCase):
    """SpotGetExchangeInfoV3Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SpotGetExchangeInfoV3Resp:
        """Test SpotGetExchangeInfoV3Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SpotGetExchangeInfoV3Resp`
        """
        model = SpotGetExchangeInfoV3Resp()
        if include_optional:
            return SpotGetExchangeInfoV3Resp(
                exchange_filters = [
                    null
                    ],
                rate_limits = [
                    binance.spot.models.spot_rate_limit.SpotRateLimit(
                        interval = '', 
                        interval_num = 56, 
                        limit = 56, 
                        rate_limit_type = '', )
                    ],
                server_time = 56,
                sors = [
                    binance.spot.models.spot_get_exchange_info_v3_resp_sors_inner.SpotGetExchangeInfoV3Resp_sors_inner(
                        base_asset = '', 
                        symbols = [
                            ''
                            ], )
                    ],
                symbols = [
                    binance.spot.models.spot_get_exchange_info_v3_resp_symbols_inner.SpotGetExchangeInfoV3Resp_symbols_inner(
                        allow_trailing_stop = True, 
                        allowed_self_trade_prevention_modes = [
                            ''
                            ], 
                        base_asset = '', 
                        base_asset_precision = 56, 
                        base_commission_precision = 56, 
                        cancel_replace_allowed = True, 
                        default_self_trade_prevention_mode = '', 
                        filters = [
                            binance.spot.models.spot_symbol_filter.SpotSymbolFilter(
                                apply_max_to_market = True, 
                                apply_min_to_market = True, 
                                apply_to_market = True, 
                                ask_multiplier_down = '', 
                                ask_multiplier_up = '', 
                                avg_price_mins = 56, 
                                bid_multiplier_down = '', 
                                bid_multiplier_up = '', 
                                filter_type = '', 
                                limit = 56, 
                                max_notional_value = '', 
                                max_num_algo_orders = 56, 
                                max_num_iceberg_orders = 56, 
                                max_num_orders = 56, 
                                max_position = '', 
                                max_price = '', 
                                max_qty = '', 
                                max_trailing_above_delta = 56, 
                                max_trailing_below_delta = 56, 
                                min_notional_value = '', 
                                min_price = '', 
                                min_qty = '', 
                                min_trailing_above_delta = 56, 
                                min_trailing_below_delta = 56, 
                                multiplier_down = '', 
                                multiplier_up = '', 
                                step_size = '', 
                                tick_size = '', )
                            ], 
                        iceberg_allowed = True, 
                        is_margin_trading_allowed = True, 
                        is_spot_trading_allowed = True, 
                        oco_allowed = True, 
                        order_types = [
                            ''
                            ], 
                        oto_allowed = True, 
                        permission_sets = [
                            [
                                ''
                                ]
                            ], 
                        permissions = [
                            ''
                            ], 
                        quote_asset = '', 
                        quote_asset_precision = 56, 
                        quote_commission_precision = 56, 
                        quote_order_qty_market_allowed = True, 
                        quote_precision = 56, 
                        status = '', 
                        symbol = '', )
                    ],
                timezone = ''
            )
        else:
            return SpotGetExchangeInfoV3Resp(
        )
        """

    def testSpotGetExchangeInfoV3Resp(self):
        """Test SpotGetExchangeInfoV3Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
