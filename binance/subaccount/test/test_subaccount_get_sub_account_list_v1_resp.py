# coding: utf-8

"""
    Binance Sub Account API

    OpenAPI specification for Binance exchange - Subaccount API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.subaccount.models.subaccount_get_sub_account_list_v1_resp import SubaccountGetSubAccountListV1Resp

class TestSubaccountGetSubAccountListV1Resp(unittest.TestCase):
    """SubaccountGetSubAccountListV1Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubaccountGetSubAccountListV1Resp:
        """Test SubaccountGetSubAccountListV1Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubaccountGetSubAccountListV1Resp`
        """
        model = SubaccountGetSubAccountListV1Resp()
        if include_optional:
            return SubaccountGetSubAccountListV1Resp(
                sub_accounts = [
                    binance.subaccount.models.subaccount_get_sub_account_list_v1_resp_sub_accounts_inner.SubaccountGetSubAccountListV1Resp_subAccounts_inner(
                        create_time = 56, 
                        email = '', 
                        is_asset_management_sub_account = True, 
                        is_freeze = True, 
                        is_managed_sub_account = True, )
                    ]
            )
        else:
            return SubaccountGetSubAccountListV1Resp(
        )
        """

    def testSubaccountGetSubAccountListV1Resp(self):
        """Test SubaccountGetSubAccountListV1Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
