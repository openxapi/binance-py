# coding: utf-8

"""
    Binance Sub Account API

    OpenAPI specification for Binance exchange - Subaccount API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from binance.subaccount.models.subaccount_get_sub_account_futures_account_v2_resp import SubaccountGetSubAccountFuturesAccountV2Resp

class TestSubaccountGetSubAccountFuturesAccountV2Resp(unittest.TestCase):
    """SubaccountGetSubAccountFuturesAccountV2Resp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SubaccountGetSubAccountFuturesAccountV2Resp:
        """Test SubaccountGetSubAccountFuturesAccountV2Resp
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SubaccountGetSubAccountFuturesAccountV2Resp`
        """
        model = SubaccountGetSubAccountFuturesAccountV2Resp()
        if include_optional:
            return SubaccountGetSubAccountFuturesAccountV2Resp(
                future_account_resp = binance.subaccount.models.subaccount_get_sub_account_futures_account_v2_resp_future_account_resp.SubaccountGetSubAccountFuturesAccountV2Resp_futureAccountResp(
                    assets = [
                        binance.subaccount.models.subaccount_get_sub_account_futures_account_v1_resp_assets_inner.SubaccountGetSubAccountFuturesAccountV1Resp_assets_inner(
                            asset = '', 
                            initial_margin = '', 
                            maintenance_margin = '', 
                            margin_balance = '', 
                            max_withdraw_amount = '', 
                            open_order_initial_margin = '', 
                            position_initial_margin = '', 
                            unrealized_profit = '', 
                            wallet_balance = '', )
                        ], 
                    can_deposit = True, 
                    can_trade = True, 
                    can_withdraw = True, 
                    email = '', 
                    fee_tier = 56, 
                    max_withdraw_amount = '', 
                    total_initial_margin = '', 
                    total_maintenance_margin = '', 
                    total_margin_balance = '', 
                    total_open_order_initial_margin = '', 
                    total_position_initial_margin = '', 
                    total_unrealized_profit = '', 
                    total_wallet_balance = '', 
                    update_time = 56, )
            )
        else:
            return SubaccountGetSubAccountFuturesAccountV2Resp(
        )
        """

    def testSubaccountGetSubAccountFuturesAccountV2Resp(self):
        """Test SubaccountGetSubAccountFuturesAccountV2Resp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
